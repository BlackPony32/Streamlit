import plotly.express as px
import pandas as pd
import streamlit as st
import numpy as np
from plotly.colors import sequential
import plotly.graph_objects as go

def preprocess_data(data):
    """
    Data preprocessing: data type conversion and cleaning.

    Args:
        data: A Pandas DataFrame with the source data.

    Returns:
        Pandas DataFrame with the processed data.
    """

    # Identify numeric columns automatically
    numeric_cols = data.select_dtypes(include=np.number).columns

    # Process numeric columns
    for col in numeric_cols:
        # Check for missing values (NaN)
        if np.isnan(data[col]).any():
            # Fill missing values with 0 (you can choose another strategy)
            data[col].fillna(0, inplace=True)
            print(f"Warning: Column '{col}' contains missing values (NaN). Filled with 0.")

    # Remove currency symbols and thousands separators
    data[numeric_cols] = data[numeric_cols].replace('[$,]', '', regex=True).astype(float)

    return data


def create_available_cases_plot(df):
    df['Available cases (QTY)'] = df['Available cases (QTY)'].astype(int)
    df['Color'] = df['Available cases (QTY)'].apply(lambda x: 'Out of Stock' if x < 0 else 'In Stock')

    fig = px.scatter(
        df, 
        y='Product name', 
        x='Available cases (QTY)', 
        title='Available Cases (QTY)', 
        text='Available cases (QTY)',
        color='Color',  
        color_discrete_map={'Out of Stock': 'red', 'In Stock': 'green'}
    )

    fig.update_traces(
        textposition="top center",
        hovertemplate="<b>Product:</b> %{y}<br><b>Available Cases (QTY):</b> %{x}<br><b>Inventory status</b> <extra></extra>"
    )

    fig.update_layout(
        xaxis_tickangle=45, 
        plot_bgcolor='white', 
        xaxis={'categoryorder':'total descending'},
        legend_title_text='Inventory Status'
    )

    st.plotly_chart(fig)

    st.markdown("""
    ## Inventory Levels of Products Over Time

    This chart visualizes the available inventory for each product. Red dots indicate products with negative inventory (potential stockouts). Green dots represent products with positive inventory. Use it to:

    * **Track Inventory Trends:** Identify periods of high and low inventory, and sudden fluctuations. 
    * **Compare Product Inventory:** See differences in stock patterns across products.
    * **Spot Potential Issues:** Find products with consistently low or negative inventory, indicating potential stockouts. 
    * **Make Informed Decisions:** Guide inventory management, production planning, and sales strategies.
    """)


def product_analysis_app(df):
    st.title("Product Sales Analysis")
    tab1, tab2 = st.tabs(["Total Revenue", "Cases Sold"])
    product_data = df.groupby('Product name')[['Total revenue', 'Cases sold']].sum()

    with tab1:
        fig1 = px.pie(
            product_data, 
            values='Total revenue', 
            names=product_data.index,
            title="Total Revenue by Product", 
            hole=0.3, 
            color_discrete_sequence=px.colors.qualitative.Light24
        )

        fig1.update_traces(
            textposition='inside', 
            textinfo='percent+label',
            hovertemplate="<b>Product:</b> %{label}<br><b>Total Revenue:</b> %{value} $<br><b>Percentage:</b> %{percent}<extra></extra>"
        )

        st.plotly_chart(fig1, use_container_width=True)

        st.markdown("""
        ## Total Revenue by Product

        This chart breaks down the total revenue generated by each product, allowing for a clear comparison of their individual contributions to overall sales. Use this to:

        * **Identify Top Performers:** Quickly see which products are driving the most revenue.
        * **Prioritize Product Focus:** Determine which products to focus marketing and sales efforts on.
        * **Analyze Product Performance:** Compare revenue performance over time to track growth or decline of individual products.
        """)

    with tab2:
        fig2 = px.funnel(
            product_data, 
            x='Cases sold', 
            y=product_data.index,
            title="Total Cases Sold by Product",
            color=product_data.index,
            color_discrete_sequence=px.colors.qualitative.Bold
        )

        fig2.update_traces(
            hovertemplate="<b>Product:</b> %{y}<br><b>Cases Sold:</b> %{x}<extra></extra>"
        )

        st.plotly_chart(fig2, use_container_width=True)

        st.markdown("""
        ## Total Cases Sold by Product

        This visualization presents the number of cases sold for each product, providing a direct measure of their sales volume.  This allows you to:

        * **Assess Product Popularity:**  Identify the products with the highest sales volume.
        * **Manage Inventory:**  Track sales volumes to inform inventory management decisions and prevent stockouts of popular products.
        * **Identify Underperforming Products:**  See which products have low sales volumes and might require further analysis or adjustments in marketing or pricing. 
        """)


def create_cases_revenue_relationship_plot(df):
    fig = px.scatter(
        df, 
        x='Cases sold', 
        y='Total revenue', 
        color='Total revenue',
        title="Relationship between Cases Sold and Total Revenue",
        color_continuous_scale='Greens',
        size='Total revenue',  
        hover_data={'Product name': True, 'Cases sold': True, 'Total revenue': True}
    )

    fig.update_traces(
        textposition='top center',
        hovertemplate="<b>Product:</b> %{customdata[0]}<br><b>Cases Sold:</b> %{x}<br><b>Total Revenue:</b> %{y} $<extra></extra>"
    )

    fig.update_layout(
        xaxis_title="Cases Sold", 
        yaxis_title="Total Revenue", 
        plot_bgcolor='white'
    )

    st.plotly_chart(fig)

    st.markdown("""
    ## Cases Sold vs. Total Revenue

    This chart demonstrates the direct relationship between the number of cases sold and the total revenue generated. Analyze this to:

    * **Identify Top Performing Products:**  Products with higher cases sold and larger bubble sizes contribute significantly to overall revenue.
    * **Track Sales Performance:**  Monitor sales trends to understand which products are driving revenue growth.
    * **Set Sales Targets:**  Use this relationship to set realistic sales targets and revenue goals.
    """)



import plotly.graph_objects as go
import plotly.colors as colors
from plotly.subplots import make_subplots

def price_comparison_app(df):
    st.title("Average Price Comparison by Category")
    tab1, tab2 = st.tabs(["Wholesale Price", "Retail Price"])
    average_prices = df.groupby('Category name')[['Wholesale price', 'Retail price']].mean()

    with tab1:
        fig1 = go.Figure(go.Bar(
            x=average_prices.index,
            y=average_prices['Wholesale price'],
            marker_color=colors.qualitative.Pastel,
            hovertemplate="<b>Category:</b> %{x}<br><b>Wholesale Price:</b> $%{y:.2f}<extra></extra>"
        ))
        fig1.update_layout(
            title="Average Wholesale Price by Category",
            xaxis_title="Category",
            yaxis_title="Wholesale Price",
            xaxis_tickangle=45,
            hovermode="closest"
        )
        st.plotly_chart(fig1, use_container_width=True)

        st.markdown("""
        ## Average Wholesale Price by Category

        This chart visually compares average wholesale prices across categories, revealing which have higher or lower prices. Businesses can use this to:

        * **Analyze Pricing Structure:**  Identify categories needing potential price adjustments.
        * **Gain Profitability Insights:** Understand potential margins for each category, guiding sourcing, pricing, and inventory decisions.
        * **Spot Discrepancies:** Investigate significantly different prices to uncover opportunities for cost optimization or pricing adjustments. 
        """)

    with tab2:
        fig2 = go.Figure(go.Bar(
            x=average_prices.index,
            y=average_prices['Retail price'],
            marker_color=colors.qualitative.Pastel,
            hovertemplate="<b>Category:</b> %{x}<br><b>Retail Price:</b> $%{y:.2f}<extra></extra>"
        ))
        fig2.update_layout(
            title="Average Retail Price by Category",
            xaxis_title="Category",
            yaxis_title="Retail Price",
            xaxis_tickangle=45,
            hovermode="closest"
        )
        st.plotly_chart(fig2, use_container_width=True)

        st.markdown("""
        ## Average Retail Price by Category

        This chart showcases the average retail prices across different product categories. By comparing these averages, businesses can:

        * **Assess Competitive Pricing:** Evaluate how their retail prices stack up against the average for each category, enabling them to adjust pricing for greater competitiveness.
        * **Identify Premium Categories:** Determine categories where higher prices are generally accepted, allowing for potential premium pricing strategies.
        * **Understand Consumer Affordability:** Gain insights into the affordability of products within each category based on average retail prices, informing marketing and sales strategies.
        """)

def create_revenue_vs_profit_plot(df):
    st.title("Revenue Analysis")
    tab1, tab2 = st.tabs(["Revenue vs. Profit", "Revenue Breakdown by Category"])
    df['Profit'] = (df['Retail price'] - df['Wholesale price']) * df['Cases sold']
    category_revenue = df.groupby('Category name')['Total revenue'].sum()
    
    with tab1:
        product_colors = colors.qualitative.Plotly
        product_color_map = {product: color for product, color in zip(df['Product name'].unique(), product_colors)}

        fig1 = go.Figure(go.Scatter(
            x=df['Total revenue'],
            y=df['Profit'],
            mode='markers',
            marker=dict(
                color=[product_color_map[product] for product in df['Product name']],
                size=10
            ),
            text=df['Product name'],
            hovertemplate="<b>Product:</b> %{text}<br><b>Revenue:</b> $%{x:.2f}<br><b>Profit:</b> $%{y:.2f}<extra></extra>"
        ))
        fig1.update_layout(
            title="Total Revenue vs. Profit per Product",
            xaxis_title="Total Revenue",
            yaxis_title="Profit",
            hovermode="closest"
        )
        st.plotly_chart(fig1, use_container_width=True)
        st.markdown("""## The Relationship Between Total Revenue and Profit for Different Products
*Visualizing the relationship between total revenue and profit for different products offers a powerful tool for businesses to assess product performance and profitability. This allows for the identification of high-performing products, the detection of potential issues, and the discovery of trends, ultimately facilitating strategic decision-making regarding pricing, cost management, and marketing efforts.* """)

    with tab2:
        fig2 = go.Figure(go.Pie(
            values=category_revenue.values,
            labels=category_revenue.index,
            hole=0.3,
            marker=dict(colors=colors.qualitative.Vivid),
            textposition='inside',
            textinfo='percent+label',
            hovertemplate="<b>Category:</b> %{label}<br><b>Revenue:</b> $%{value:.2f}<br><b>Percentage:</b> %{percent}<extra></extra>"
        ))
        fig2.update_layout(
            title="Revenue Breakdown by Category",
            hovermode="closest"
        )
        st.plotly_chart(fig2, use_container_width=True)
        st.markdown("""## Distribution of Revenue Across Different Categories
*Pie charts offer a powerful way to visualize revenue distribution across different categories, providing insights into the proportion each category contributes to the total. By highlighting the largest slices, businesses can quickly identify their key revenue drivers and make strategic decisions based on this understanding. This visual comparison of categories also facilitates tracking changes in revenue distribution over time, informing businesses about shifting consumer preferences and market trends.*""")